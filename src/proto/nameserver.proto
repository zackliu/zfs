// Auther: zackliu1995@hotmail.com
import "file.proto";
import "status_code.proto";

package zfs;

option cc_generic_services = true;

message LocatedBlock 
{
    optional int64 blockId = 1;
    optional int64 blockSize = 2;
    repeated ChunkServerInfo chains = 3;
    optional int32 status = 4;
}

message ReportBlockInfo 
{
    optional int64 blockId = 1;
    optional int64 version = 2;
    optional int64 blockSize = 3;
    optional bool isRecover = 4 [default = false];
}

message ReplicaInfo 
{
    optional int64 blockId = 1;
    repeated string chunkserverAddress = 2;
    //optional int64 blockSize = 3;
    //optional int64 blockVersion = 4;
    optional bool priority = 5;
    optional int32 recoverTimeout = 6;
}

message ChunkServerInfo 
{
    optional int32 id = 1;
    optional string address = 2;
    optional string startTime = 17;
    optional int32 lastHeartbeat = 3;
    optional int64 dataSize = 4;
    optional int64 diskQuota = 5;
    optional int32 blockNum = 7;
    optional bool isDead = 8;
    optional ChunkServerStatus status = 9;
    optional int32 ip = 10;
    optional int32 buffers = 11;
    optional int32 pendingBuf = 28;
    optional int32 pendingRecover = 29;
    optional bool kick = 12;
    optional string zone = 13;
    optional string datacenter = 14;
    optional string rack = 15;
    optional string tag = 16;
    // running status
    optional double load = 20 [default = 1.0];
    optional int32 wQps = 21;
    optional int64 wSpeed = 22;
    optional int32 rQps = 23;
    optional int64 rSpeed = 24;
    optional int64 writingBuffers = 25;
    optional int64 activeBlocks = 26;
    optional int64 recoverSpeed = 27;
}

message CreateFileRequest
{
    optional int64 sequenceId = 1;
    optional string fileName = 2;
    optional int32 mode = 3;
    optional int32 flags = 4;
    optional int32 replicaNum = 5;
    optional string user = 7;
}

message CreateFileResponse
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message AddBlockRequest 
{
    optional int64 sequenceId = 1;
    optional string fileName = 2;
    optional string clientAddress = 3;
}

message AddBlockResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    optional LocatedBlock block = 3;
}

message FileLocationRequest 
{
    optional int64 sequenceId = 1;
    optional string fileName = 2;
    optional int64 offset = 3;
    optional int32 blockNum = 4 [default = 10];
    optional string user = 5;
}

message FileLocationResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    repeated LocatedBlock blocks = 3;
}

message ListDirectoryRequest 
{
    optional int64 sequenceId = 1;
    optional string path = 2;
}

message ListDirectoryResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    repeated FileInfo files = 3;
}

message StatRequest 
{
    optional int64 sequenceId = 1;
    optional string path = 2;
}

message StatResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    optional FileInfo fileInfo = 3;
}

message RenameRequest 
{
    optional int64 sequenceId = 1;
    optional string oldpath = 2;
    optional string newpath = 3;
}

message RenameResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message SyncBlockRequest 
{
    optional int64 sequenceId = 1;
    optional int64 blockId = 2;
    optional string fileName = 3;
    optional int64 size = 4;
}

message SyncBlockResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message FinishBlockRequest 
{
    optional int64 sequenceId = 1;
    optional int64 blockId = 2;
    optional int64 blockVersion = 3;
    optional string fileName = 4;
    optional int64 blockSize = 5;
    optional bool closeWithError = 6;
}

message FinishBlockResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message UnlinkRequest 
{
    optional int64 sequenceId = 1;
    optional string path = 2;
}

message UnlinkResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message DeleteDirectoryRequest 
{
    optional int64 sequenceId = 1;
    optional string path = 2;
    optional bool recursive = 3;
}

message DeleteDirectoryResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message ChangeReplicaNumRequest 
{
    optional int64 sequenceId = 1;
    optional string fileName = 2;
    optional int32 replicaNum = 3;
}

message ChangeReplicaNumResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message ShutdownChunkServerRequest 
{
    optional int64 sequenceId = 1;
    repeated string chunkserverAddress = 2;
}

message ShutdownChunkServerResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message ShutdownChunkServerStatRequest 
{
    optional int64 sequenceId = 1;
}

message ShutdownChunkServerStatResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    optional bool inOfflineProgress = 3;
}

message DiskUsageRequest 
{
    optional int64 sequenceId = 1;
    optional string path = 2;
}

message DiskUsageResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    optional uint64 duSize = 3;
}

message RegisterRequest 
{
    optional int64 sequenceId = 1;
    optional string chunkserverAddr = 3;
    optional int64 namespaceVersion = 4;
    optional string tag = 5;
    optional int64 diskQuota = 7;
}

message RegisterResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    optional int32 chunkserverId = 5;
    optional int64 namespaceVersion = 6;
    optional int32 reportInterval = 7 [default = -1];
    optional int32 reportSize = 8 [default = -1];
    optional int64 reportId = 9 [default = -1];
}

message HeartBeatRequest 
{
    optional int64 sequenceId = 1;
    optional string chunkserverAddr = 2;
    optional int32 chunkserverId = 3;
    optional int64 namespaceVersion = 4;
    optional int32 blockNum = 5;
    optional int64 dataSize = 6;
    optional int32 buffers = 7;
    optional int32 pendingBuf = 13;
    optional int32 pendingRecover = 14;
    optional int32 wQps = 8;
    optional int64 wSpeed = 9;
    optional int32 rQps = 10;
    optional int64 rSpeed = 11;
    optional int64 recoverSpeed = 12;
}

message HeartBeatResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    optional int64 namespaceVersion = 3;
    optional bool kick = 4;
    optional int32 reportInterval = 5 [default = -1];
    optional int32 reportSize = 6 [default = -1];
}

message BlockReportRequest 
{
    optional int64 sequenceId = 1;
    optional int32 chunkserverId = 2;
    optional string chunkserverAddr = 3;
    optional int64 start = 4;
    optional int64 end = 5;
    repeated ReportBlockInfo blocks = 6;
    optional int64 reportId = 7 [default = -1];
}

message BlockReportResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
    repeated int64 obsoleteBlocks = 3;
    repeated int64 closeBlocks = 4;
    repeated ReplicaInfo newReplicas = 5;
    optional int64 reportId = 6 [default = -1];
}

message BlockReceivedRequest 
{
    optional int64 sequenceId = 1;
    optional int32 chunkserverId = 2;
    optional string chunkserverAddr = 3;
    repeated ReportBlockInfo blocks = 6;
}

message BlockReceivedResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message PushBlockReportRequest 
{
    optional int64 sequenceId = 1;
    optional int32 chunkserverId = 2;
    repeated int64 blocks = 3;
    repeated StatusCode status = 4;
}

message PushBlockReportResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message SysStatRequest 
{
    optional string statName = 2;
}

message SysStatResponse 
{
    optional StatusCode status = 2;
    repeated ChunkServerInfo chunkservers = 3;
    optional int64 blockNum = 4;
    optional int64 dataSize = 5;
}

message ChmodRequest 
{
    optional int64 sequenceId = 1;
    optional int32 mode = 2;
    optional string path = 3;
}

message ChmodResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

message SymlinkRequest 
{
    optional int64 sequenceId = 1;
    optional string src = 2;
    optional string dst = 3;
    optional string user = 4;
}

message SymlinkResponse 
{
    optional int64 sequenceId = 1;
    optional StatusCode status = 2;
}

service NameServer 
{
    rpc createFile(CreateFileRequest) returns(CreateFileResponse);
    rpc addBlock(AddBlockRequest) returns(AddBlockResponse);
    rpc getFileLocation(FileLocationRequest) returns(FileLocationResponse);
    rpc listDirectory(ListDirectoryRequest) returns(ListDirectoryResponse);
    rpc stat(StatRequest) returns(StatResponse);
    rpc rename(RenameRequest) returns(RenameResponse);
    rpc syncBlock(SyncBlockRequest) returns(SyncBlockResponse);
    rpc finishBlock(FinishBlockRequest) returns(FinishBlockResponse);
    rpc unlink(UnlinkRequest) returns(UnlinkResponse);
    rpc deleteDirectory(DeleteDirectoryRequest) returns(DeleteDirectoryResponse);
    rpc changeReplicaNum(ChangeReplicaNumRequest) returns(ChangeReplicaNumResponse);
    rpc shutdownChunkServer(ShutdownChunkServerRequest) returns(ShutdownChunkServerResponse);
    rpc shutdownChunkServerStat(ShutdownChunkServerStatRequest) returns(ShutdownChunkServerStatResponse);
    rpc diskUsage(DiskUsageRequest) returns(DiskUsageResponse);

    rpc doRegister(RegisterRequest) returns(RegisterResponse);
    rpc heartBeat(HeartBeatRequest) returns(HeartBeatResponse);
    rpc blockReport(BlockReportRequest) returns(BlockReportResponse);
    rpc blockReceived(BlockReceivedRequest) returns(BlockReceivedResponse);
    rpc pushBlockReport(PushBlockReportRequest) returns(PushBlockReportResponse);

    rpc sysStat(SysStatRequest) returns(SysStatResponse);
    rpc chmod(ChmodRequest) returns(ChmodResponse);
    rpc symlink(SymlinkRequest) returns(SymlinkResponse);
}

message NsLogEntry
{
    optional int32 type = 1;
    optional bytes key = 2;
    optional bytes value = 3;
}

message NameServerLog
{
    repeated NsLogEntry entries = 1;
}